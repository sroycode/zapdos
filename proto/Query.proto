syntax  =  "proto3";
option optimize_for  =  SPEED;
// option cc_enable_arenas  =  true;

import "Search.proto";
import "Store.proto";

package zpds.query;

// DONOT TOUCH THIS - START

message StateT {
	string                       hostname                           =  1;
	string                       master                             =  2;
	bool                         is_master                          =  5;
	bool                         is_ready                           =  6;
	uint64                       ts                                 =  7;

	bool                         not_found                          = 21;
}

message ErrorT {
	string                       errorcode                          =  1;
	string                       error                              =  2;
	bool                         success                            =  3;
	int32                        ecode                              =  4;

	uint64                       inputcount                         =  8;
	uint64                       updatecount                        =  9;
}

// DONOT TOUCH THIS - END

enum WriteTypeE {
	W_NONE                                                          =  0;
	W_CREATE                                                        =  1;
	W_UPSERT                                                        =  2;
	W_UPDATE                                                        =  3;
	W_DELETE                                                        =  4;
	W_UMERGE                                                        =  5;
}

enum ReaderTypeE {
	R_NONE                                                          =  0;
	R_SELF                                                          =  1; // self view
	R_ADMIN                                                         =  2; // admin view
	R_CREATR                                                        =  3; // exter who created this
	R_OTHER                                                         =  4; // exter other
	R_USER                                                          =  5; // other users
	R_PUBLIC                                                        =  6; // unsigned view if any
}

// LoginService
message LoginRespT {
	string                        username                          =  1; // INPUT login name

	string                        password                          =  4; // INPUT password
	string                        sessionkey                        =  5; // INPUT web session key

	ErrorT                        error                             = 11;
}

// ExterDataService + UserDataService
message ResetRespT {
	string                        username                          =  1; // INPUT login name

	string                        oldpass                           =  2; // INPUT old password
	string                        newpass                           =  3; // INPUT new password
	string                        otp                               =  4; // INPUT one time password for reset

	ErrorT                        status                            =  5;

}

// TagDataService
message TagDataRespT {
	string                        username                          =  1; // updater name
	string                        sessionkey                        =  2; // updater credential
	ErrorT                        status                            =  3;
	WriteTypeE                    action                            =  4; // action type
	store.KeyTypeE                keytype                           =  5; // keytype check

	store.TagDataT                payload                           = 11; // input data
	repeated store.TagDataT       payloads                          = 12; // input data
}

// CategoryService (extendable)
message CategoryRespT {
	string                        username                          =  1; // updater name
	string                        sessionkey                        =  2; // updater credential
	ErrorT                        status                            =  3;
	WriteTypeE                    action                            =  4; // action type

	bool                          getall                            =  5; // read get all

	store.CategoryT               payload                           = 11; // input data
	repeated store.CategoryT      payloads                          = 12; // input data
}

// UserDataService
message UserDataRespT {
	string                        username                          =  1; // updater name
	string                        sessionkey                        =  2; // updater creds
	ErrorT                        status                            =  3;
	WriteTypeE                    action                            =  4; // action type
	store.KeyTypeE                keytype                           =  5; // keytype check

	int32                         fields                            =  6; // fields to update
	bool                          is_self                           =  7; // updating for self

	store.UserDataT               payload                           = 11; // input data
	repeated store.UserDataT      payloads                          = 12; // input data
}

// ItemDataService


message ItemDataRespT {
	string                        username                          =  1; // updater name
	string                        sessionkey                        =  2; // updater creds
	ErrorT                        status                            =  3;
	WriteTypeE                    action                            =  4; // action type

	int32                         fields                            =  6; // fields to update

	store.KeyTypeE                usertype                          =  8; // keytype for reader 
	store.KeyTypeE                datatype                          =  9; // keytype for data

	store.ItemDataT               payload                           = 11; // input data for CRUD
	repeated store.ItemDataT      payloads                          = 12; // input data for CRUD  
}

// Search Response
message PhotonResultT {
	string                        type                              =  1; // like FeatureCollection
	repeated search.PhotonDataT   features                          =  2; // search results
}

message ItemResultT {
	repeated store.ItemDataT      records                           =  1; // search results
}

message SearchCompletionRespT {
	string                        username                          =  1; // updater name
	string                        sessionkey                        =  2; // updater creds
	ErrorT                        status                            =  3;

	search.UsedParamsT            cdata                             = 16; // search input params
	ItemResultT                   cresp                             = 17; // search output 

	PhotonResultT                 photondata                        = 18; // search output photon
	ItemResultT                   wikidata                          = 19; // search output photon
}
